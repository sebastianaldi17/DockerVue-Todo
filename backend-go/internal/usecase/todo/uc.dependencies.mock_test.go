// Code generated by MockGen. DO NOT EDIT.
// Source: uc.todo.dependencies.go

// Package todo is a generated GoMock package.
package todo

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	todo "github.com/sebastianaldi17/dockervue-todo/backend-go/internal/entity/todo"
)

// MocktodoResource is a mock of todoResource interface.
type MocktodoResource struct {
	ctrl     *gomock.Controller
	recorder *MocktodoResourceMockRecorder
}

// MocktodoResourceMockRecorder is the mock recorder for MocktodoResource.
type MocktodoResourceMockRecorder struct {
	mock *MocktodoResource
}

// NewMocktodoResource creates a new mock instance.
func NewMocktodoResource(ctrl *gomock.Controller) *MocktodoResource {
	mock := &MocktodoResource{ctrl: ctrl}
	mock.recorder = &MocktodoResourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktodoResource) EXPECT() *MocktodoResourceMockRecorder {
	return m.recorder
}

// AddTodo mocks base method.
func (m *MocktodoResource) AddTodo(todo todo.Todo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTodo", todo)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTodo indicates an expected call of AddTodo.
func (mr *MocktodoResourceMockRecorder) AddTodo(todo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTodo", reflect.TypeOf((*MocktodoResource)(nil).AddTodo), todo)
}

// DeleteTodo mocks base method.
func (m *MocktodoResource) DeleteTodo(id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTodo", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTodo indicates an expected call of DeleteTodo.
func (mr *MocktodoResourceMockRecorder) DeleteTodo(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTodo", reflect.TypeOf((*MocktodoResource)(nil).DeleteTodo), id)
}

// GetTodoByID mocks base method.
func (m *MocktodoResource) GetTodoByID(id int64) (todo.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodoByID", id)
	ret0, _ := ret[0].(todo.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodoByID indicates an expected call of GetTodoByID.
func (mr *MocktodoResourceMockRecorder) GetTodoByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodoByID", reflect.TypeOf((*MocktodoResource)(nil).GetTodoByID), id)
}

// GetTodos mocks base method.
func (m *MocktodoResource) GetTodos() ([]todo.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodos")
	ret0, _ := ret[0].([]todo.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodos indicates an expected call of GetTodos.
func (mr *MocktodoResourceMockRecorder) GetTodos() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodos", reflect.TypeOf((*MocktodoResource)(nil).GetTodos))
}

// UpdateTodo mocks base method.
func (m *MocktodoResource) UpdateTodo(id int64, req todo.UpdateRequest) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTodo", id, req)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTodo indicates an expected call of UpdateTodo.
func (mr *MocktodoResourceMockRecorder) UpdateTodo(id, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTodo", reflect.TypeOf((*MocktodoResource)(nil).UpdateTodo), id, req)
}
