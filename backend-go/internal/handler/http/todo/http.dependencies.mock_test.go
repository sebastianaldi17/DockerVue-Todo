// Code generated by MockGen. DO NOT EDIT.
// Source: http.todo.dependencies.go

// Package todo is a generated GoMock package.
package todo

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	todo "github.com/sebastianaldi17/dockervue-todo/backend-go/internal/entity/todo"
)

// MocktodoUsecase is a mock of todoUsecase interface.
type MocktodoUsecase struct {
	ctrl     *gomock.Controller
	recorder *MocktodoUsecaseMockRecorder
}

// MocktodoUsecaseMockRecorder is the mock recorder for MocktodoUsecase.
type MocktodoUsecaseMockRecorder struct {
	mock *MocktodoUsecase
}

// NewMocktodoUsecase creates a new mock instance.
func NewMocktodoUsecase(ctrl *gomock.Controller) *MocktodoUsecase {
	mock := &MocktodoUsecase{ctrl: ctrl}
	mock.recorder = &MocktodoUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktodoUsecase) EXPECT() *MocktodoUsecaseMockRecorder {
	return m.recorder
}

// AddTodo mocks base method.
func (m *MocktodoUsecase) AddTodo(todo todo.Todo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTodo", todo)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTodo indicates an expected call of AddTodo.
func (mr *MocktodoUsecaseMockRecorder) AddTodo(todo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTodo", reflect.TypeOf((*MocktodoUsecase)(nil).AddTodo), todo)
}

// DeleteTodo mocks base method.
func (m *MocktodoUsecase) DeleteTodo(id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTodo", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTodo indicates an expected call of DeleteTodo.
func (mr *MocktodoUsecaseMockRecorder) DeleteTodo(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTodo", reflect.TypeOf((*MocktodoUsecase)(nil).DeleteTodo), id)
}

// GetTodoByID mocks base method.
func (m *MocktodoUsecase) GetTodoByID(id int64) (todo.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodoByID", id)
	ret0, _ := ret[0].(todo.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodoByID indicates an expected call of GetTodoByID.
func (mr *MocktodoUsecaseMockRecorder) GetTodoByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodoByID", reflect.TypeOf((*MocktodoUsecase)(nil).GetTodoByID), id)
}

// GetTodos mocks base method.
func (m *MocktodoUsecase) GetTodos() ([]todo.Todo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodos")
	ret0, _ := ret[0].([]todo.Todo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodos indicates an expected call of GetTodos.
func (mr *MocktodoUsecaseMockRecorder) GetTodos() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodos", reflect.TypeOf((*MocktodoUsecase)(nil).GetTodos))
}

// UpdateTodo mocks base method.
func (m *MocktodoUsecase) UpdateTodo(req todo.UpdateRequest, id int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTodo", req, id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTodo indicates an expected call of UpdateTodo.
func (mr *MocktodoUsecaseMockRecorder) UpdateTodo(req, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTodo", reflect.TypeOf((*MocktodoUsecase)(nil).UpdateTodo), req, id)
}
